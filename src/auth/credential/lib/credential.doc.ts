import { applyDecorators } from '@nestjs/common';
import {
  ApiBearerAuth,
  ApiBody,
  ApiCreatedResponse,
  ApiOkResponse,
  ApiOperation,
  ApiQuery,
} from '@nestjs/swagger';
import { CreateAccountDto } from '../dtos/create.dto';
import {
  ConfirmOptions,
  ResendOptions,
  SendOTPMedium,
} from 'src/auth/lib/@types';
import { CredentialsDto } from '../dtos/credentials.dto';
import { ValidateOtpDto } from '../dtos/otp.dto';
import { UpdateCredentialsDto } from '../dtos/update.dto';
import {
  TokensResDto,
  UserResDto,
  UserWithTokensResDto,
} from '../dtos/response.dto';

export default {
  createAccount: () =>
    applyDecorators(
      ApiOperation({
        summary: 'Initiate sign up (account creation) process',
        description: `
            Saves the user in the database, sends them a confirmation link by email
            and generates a short-living token with limited access. 
            The short-living token with limited access is needed to request
            a new confirmation link (in case, for example, the previous one
            was not received).
          `,
      }),
      ApiBody({
        type: CreateAccountDto,
        required: true,
      }),
      ApiCreatedResponse({
        type: String,
        description: 'Short-living token with limited access',
      }),
    ),
  confirm: () =>
    applyDecorators(
      ApiOperation({
        summary: 'Confirm account creation or deletion',
        description: `
            This link is generated by the server an sent to the user's email.
            All the query strings are prefilled and they just have to click.
        `,
      }),
      ApiQuery({
        name: 'token',
        description: 'Confirmation token generated by the server',
        required: true,
      }),
      ApiQuery({
        name: 'action',
        description: 'Action to perform with the confirmation token',
        enum: ConfirmOptions,
      }),
      ApiOkResponse({
        type: UserResDto,
      }),
    ),
  logIn: () =>
    applyDecorators(
      ApiOperation({
        summary: 'Initiate log in (authenticate) process',
        description: `
          Validates the credentials submitted (email and password), sends the OTP code
          by SMS to the user and generates a short-living token with limited access. The use of this 
          short-living token with limited access is the same as the one generated on sign up.
        `,
      }),
      ApiBody({
        type: CredentialsDto,
      }),
      ApiOkResponse({
        type: String,
        description: 'Short-living token with limited access',
      }),
    ),
  validateOTP: () =>
    applyDecorators(
      ApiBearerAuth('at'),
      ApiOperation({
        summary: 'Validate OTP and grant authentication tokens',
        description: `
          Validates the OTP code, generates the access and refresh tokens and gives them
          to the user. They now have full access to any endpoint of the API.
      `,
      }),
      ApiBody({
        type: ValidateOtpDto,
      }),
      ApiOkResponse({
        type: UserWithTokensResDto,
      }),
    ),
  resend: () =>
    applyDecorators(
      ApiBearerAuth('at'),
      ApiOperation({
        summary: 'Request new confirmation link or OTP code',
        description: `
          To be called in case the confirmation link or the OTP code was not received.
          This endpoint requires the short-living token with limited access generated on sign up
          (in case user requests confirmation link) or log in (in case user requests OTP).
      `,
      }),
      ApiQuery({
        name: 'what',
        enum: ResendOptions,
        description: 'What do you want the system to resend ?',
        required: true,
      }),
      ApiQuery({
        name: 'action',
        enum: ConfirmOptions,
        description:
          'What is it for ? (mandatory if requesting a confirmation link)',
        nullable: true,
      }),
      ApiOkResponse({
        type: String,
        description: 'Short-living token with limited access',
      }),
    ),
  logOut: () =>
    applyDecorators(
      ApiBearerAuth('at'),
      ApiOperation({
        summary: 'Log user out',
        description: 'Revokes the current tokens',
      }),
    ),
  deleteAccount: () =>
    applyDecorators(
      ApiBearerAuth('at'),
      ApiOperation({
        summary: 'Initiate account deletion process',
        description: `
            Sends a confirmation link by email to the user then generates a short-living
             with limited accessaccess token. Its use it the same as the one generated on sign up. Once the
            link is clicked, the user will be taken to the /confirm endpoint where both
            creation and deletion are to be confirmed.
        `,
      }),
      ApiOkResponse({
        type: String,
        description: 'Short-living token with limited access',
      }),
    ),
  initUpdate: () =>
    applyDecorators(
      ApiBearerAuth('at'),
      ApiOperation({
        summary: 'Initiate credentials update',
        description: `
          Sends OTP by SMS or email to the user, generates a short-living token with limited access.
          Its use is the same as the one generated on sign up.
      `,
      }),
      ApiQuery({
        name: 'medium',
        enum: SendOTPMedium,
        description: 'How do we send the OTP ?',
        required: true,
      }),
      ApiOkResponse({
        type: String,
        description: 'Short-living token with limited access',
      }),
    ),
  completeUpdate: () =>
    applyDecorators(
      ApiBearerAuth('at'),
      ApiOperation({
        summary: 'Complete credentials update',
        description: `
          Validates the OTP (sent in the body), updates the credentials and generates
          the access and refresh tokens and gives them to the user.
          They now have full access to any endpoint of the API. 
      `,
      }),
      ApiBody({
        type: UpdateCredentialsDto,
      }),
      ApiOkResponse({
        type: UserWithTokensResDto,
      }),
    ),
  refresh: () =>
    applyDecorators(
      ApiBearerAuth('rt'),
      ApiOperation({
        summary: 'Rotate the tokens',
      }),
      ApiOkResponse({
        type: TokensResDto,
      }),
    ),
};
